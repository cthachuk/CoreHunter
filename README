# Overview

This is the source code for the Core Hunter project <http://corehunter.org>

Core Hunter is a library for selecting and analysing genetic
resources.  The source code is currently organized into a libary, and
a two command line interface (CLI) applciations using the library.

Core Hunter library:
./corehunter-lib/*

Core Hunter CLI application:
./corehunter-cli/*

Core Analyser CLI application:
./coreanalyser-cli/*


# Building the source

The project currently required Maven, and any JDK version 1.5+.

On a unix/linux flavoured OS:

    ./build.sh

On windows:

    mvn package

The former simply copies the resulting JAR files into a bin directory of the project.


# An example of running the CoreHunter CLI application

Assuming CoreHunter was built with `build.sh`:

    java -jar bin/corehunter-cli.jar -MR 0.7 -SH 0.3 data/examples/bul.csv mycoresubset.dat

This uses the default Mixed Replica search algorithm. Alternatively, an optimization algorithm of choice can be selected, e.g.:

    java -jar bin/corehunter-cli.jar -remc -MR 0.7 -SH 0.3 data/examples/bul.csv mycoresubset.dat

Run the help command

    java -jar bin/corehunter-cli.jar -help

for an overview of all available algorithms and their parameters. Three different stop criteria can be applied when sampling core sets using Core Hunter: a maximum runtime (60 seconds by default), a required minimum progression in the score of the current core (by default not used) or a maximum time without improvement (stuck time, by default also not used). For more information about these stop criteria look in the 'common advanced search options' section of the output of the help command.

The file format of Core Hunter is demonstrated in the example dataset file 'data/examples/bul.csv' (comma separated file). The first column denotes all genetic markers used in the dataset. The second column indicates the different alleles that may occur at each specific marker locus. Subsequent columns describe the accessions of the dataset. For each combination of accession, marker and allele the file indicates the allelic frequency observed in this accession at the respective marker locus. Usually allelic frequencies of alleles at the same locus should sum to 1. In case of missing data, fields may be left blank. The same file format is used for the output file generated by Core Hunter, denoting the core subset that was sampled from the input dataset.

# Questions

Any questions about Core Hunter should be directed to

Chris Thachuk
<chris DOT thachuk AT gmail DOT com>

Herman De Beukelaer
<herman DOT debeukelaer AT gmail DOT com>